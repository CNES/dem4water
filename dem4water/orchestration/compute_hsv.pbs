#!/usr/bin/env bash

#PBS -l select=1:ncpus=6:mem=30000MB:os=rh7
#PBS -l walltime=0:50:00

echo "Usage : qsub -v WD=\$PWD,DAM=dame_name,DAM_ID=dam_id,ID_FIELD=id_field,DB_PATH=database,DEM_PATH=dem,REF_MODEL=ref_model,WMAP_PATH=surfwater_map,ROOT_DIR=hsv_directory,VENV=\$PWD/venv_dem/bin/activate
                      compute_hsv.pbs"
cd "$WD" || exit

# Set environnement
module purge
module load otb/7.4-python3.7.2
VENV=${VENV:-"$WD/venv_dem/bin/activate"}
source "$VENV"

# Initialisation
CAMP_DIR="${ROOT_DIR}/camp"
EXTR_DIR="${ROOT_DIR}/extracts"
# If not provided set variables to empty string
RADIUS=${RADIUS:-""}
INFO_DAM=${INFO_DAM:-""}
CUTLINE=${CUTLINE:-""}
SZIDAT=${SZIDAT:-""}
ELEV_OFF_DAM=${ELEV_OFF_DAM:-20}
JUMP_RATIO=${JUMP_RATIO:-10}
SELECT_MODE=${SELECT_MODE:-"best"}
FILTER_AREA=${FILTER_AREA:-"disabled"}
[ -z "$OTB_MAX_RAM_HINT" ] && export OTB_MAX_RAM_HINT=4000
export OTB_LOGGER_LEVEL=CRITICAL

echo "== DAM : $DAM"
echo "== DAM ID : $DAM_ID"
echo "== ID FIELD: $ID_FIELD"
echo "== BD : $DB_PATH"
echo "== WMAP : $WMAP_PATH"
echo "== DEM : $DEM_PATH"
echo "== REFERENCE MODEL : $REF_MODEL"
echo "== RADIUS : $RADIUS"
echo "== ELEV_OFF_DAM : $ELEV_OFF_DAM"
echo "== CUTLINE : $CUTLINE"
echo "== INFO_DAM : ${INFO_DAM}"
echo "== SZIDAT: ${SZIDAT}"
echo "== SELECT_MODE: ${SELECT_MODE}"
echo "== JUMP_RATIO: ${JUMP_RATIO}"
echo "== FILTER_AREA: ${FILTER_AREA}"

[ -d "$EXTR_DIR/${DAM}" ] || mkdir -p "$EXTR_DIR/${DAM}"
[ -d "$CAMP_DIR/${DAM}/tmp" ] || mkdir -p "$CAMP_DIR/${DAM}/tmp"
[ -d "$CAMP_DIR/${DAM}/log" ] || mkdir -p "$CAMP_DIR/${DAM}/log"

if [ -f "$EXTR_DIR/${DAM}/dem_extract_$DAM.tif" ] \
   && [ -f "$EXTR_DIR/${DAM}/wmap_extract_$DAM.tif" ] ; then
   echo "Extracts already available --> Skipping area_mapping."
else
   echo "== AREA_MAPPING =="
   python3 ../area_mapping.py --debug       \
           --id       "${DAM_ID}"        \
           --id_db    "${ID_FIELD}"      \
           --infile   "${DB_PATH}"       \
           --watermap "${WMAP_PATH}"     \
           --dem      "${DEM_PATH}"      \
           --radius   "${RADIUS}"          \
           --out      "$EXTR_DIR/${DAM}" \
    2>&1 tee "$CAMP_DIR/${DAM}/log/area_mapping.log"
fi

echo "== SZI_FROM_CONTOURLINE =="
python3 ../szi_from_contourline.py --debug                         \
        --id           "${DAM_ID}"                              \
        --id_db        "${ID_FIELD}"                            \
        --infile       "${DB_PATH}"                             \
        --watermap     "$EXTR_DIR/${DAM}/wmap_extract_$DAM.tif" \
        --dem          "$EXTR_DIR/${DAM}/dem_extract_$DAM.tif"  \
        --radius       "$RADIUS"                                \
        --pdbstep      5                                        \
        --pdbradius    500                                      \
        --elevoffset   "${ELEV_OFF_DAM}"                        \
        --tmp          "$CAMP_DIR/${DAM}/tmp"                   \
        --out          "$CAMP_DIR/${DAM}"                       \
		--info         "${INFO_DAM}"
    2>&1 tee "$CAMP_DIR/${DAM}/log/szi_from_contourline.log"

echo "== CUTLINE_SCORE =="
if [ -f "${CUTLINE}" ] ; then
  CUTLINE_FILE="${CUTLINE}"
  echo "= Using User Provided Cutline file ($CUTLINE_FILE)"
else
  CUTLINE_FILE="$CAMP_DIR/${DAM}/${DAM}_cutline.json"
fi

python3 ../cutline_score.py --debug                            \
        --watermap "$EXTR_DIR/${DAM}/wmap_extract_$DAM.tif" \
        --infile   "${CUTLINE_FILE}"   \
        --out      "$CAMP_DIR/${DAM}/tmp"                   \
    2>&1 tee "$CAMP_DIR/${DAM}/log/cutline_score.log"

echo "== CUT_CONTOURLINES =="
# Allow using a user-provided cutline
# UP cutline should be located in $$EXTR_DIR/${DAM}/
# and named ${DAM}_cutline_custom.json"
# if [ -f "$EXTR_DIR/${DAM}/${DAM}_cutline_custom.json" ] ; then
#   CUTLINE_FILE="$EXTR_DIR/${DAM}/${DAM}_cutline_custom.json"
#   echo "= Using User Provided Cutline file ($CUTLINE_FILE)"
# else
#   CUTLINE_FILE="$CAMP_DIR/${DAM}/${DAM}_cutline.json"
# fi

# Handle daminfo update
if [ -f "${INFO_DAM}" ] ; then
  DAM_FILE="${INFO_DAM}"
  echo "= Using User Provided DAM Info file (${INFO_DAM})"
else
  DAM_FILE="$CAMP_DIR/${DAM}/${DAM}_daminfo.json"
fi

if [ -f "$EXTR_DIR/${DAM}/${DAM}_contourlines@1m.json" ] ; then
  echo "= Using cached contour line file ($EXTR_DIR/${DAM}/${DAM}_contourlines@1m.json)"
  python3 ../cut_contourlines.py --debug                                   \
    --info         "${DAM_FILE}"         \
    --dem          "$EXTR_DIR/${DAM}/dem_extract_$DAM.tif"        \
    --cut          "$CUTLINE_FILE"                                \
    --level        "$EXTR_DIR/${DAM}/${DAM}_contourlines@1m.json" \
    --tmp          "$CAMP_DIR/${DAM}/tmp"                         \
    --out          "$CAMP_DIR/${DAM}"                             \
    2>&1 tee "$CAMP_DIR/${DAM}/log/cut_contourlines.log"
else
  echo "= No cached contour line file, generating it"
  python3 ../cut_contourlines.py --debug                             \
    --info         "${DAM_FILE}"         \
    --dem          "$EXTR_DIR/${DAM}/dem_extract_$DAM.tif"        \
    --cut          "$CUTLINE_FILE"                                \
    --elevsampling 1                                              \
    --elevoffset   "${ELEV_OFF_DAM}"                              \
    --tmp          "$CAMP_DIR/${DAM}/tmp"                         \
    --cache        "$EXTR_DIR/${DAM}"                             \
    --out          "$CAMP_DIR/${DAM}"                             \
    2>&1 tee "$CAMP_DIR/${DAM}/log/cut_contourlines.log"
fi

echo "== SZI_TO_MODEL =="
if [ -f "${SZIDAT}" ] ; then
  echo "== Custom SZI.dat file"
  python3 szi_to_model.py -debug                               \
          -szi_file     "$CAMP_DIR/${DAM}/${DAM}_SZi.dat"      \
          -daminfo    "${DAM_FILE}"                            \
	  -watermap   "$EXTR_DIR/${DAM}/wmap_extract_$DAM.tif" \
	  -database   "${DB_PATH}"                             \
          -zminoffset 10                                       \
          -zmaxoffset 30                                       \
          -maemode    "first"                                  \
	  -custom_szi "${SZIDAT}"                              \
          -outfile    "$CAMP_DIR/${DAM}/${DAM}_model.png"      \
	  -filter_area "${FILTER_AREA}"                       \
      2>&1 | tee "$CAMP_DIR/${DAM}/log/szi_to_model.log"
else

  python3 szi_to_model.py -debug                               \
          -szi_file     "$CAMP_DIR/${DAM}/${DAM}_SZi.dat"      \
          -daminfo    "${DAM_FILE}"                            \
	  -watermap   "$EXTR_DIR/${DAM}/wmap_extract_$DAM.tif" \
	  -database   "${DB_PATH}"                             \
          -zminoffset 10                                       \
          -zmaxoffset 30                                       \
          -maemode    "first"                                  \
	  -jump_ratio "$JUMP_RATIO"                            \
	  -selection_mode "$SELECT_MODE"                       \
	  -filter_area "${FILTER_AREA}"                        \
          -outfile    "$CAMP_DIR/${DAM}/${DAM}_model.png"      \
      2>&1 | tee "$CAMP_DIR/${DAM}/log/szi_to_model.log"
fi
if [ -f "$REF_MODEL" ] ; then
echo "== VAL_REPORT =="
   python3 ../val_report.py --debug                    \
           -i "$CAMP_DIR/${DAM}/${DAM}_model.json"  \
           -r "$REF_MODEL"                          \
           -o "$CAMP_DIR/${DAM}/${DAM}_report.json" \
   2>&1 tee "$CAMP_DIR/${DAM}/log/val_report.log"
fi
echo "== End DEM4WATER =="
